var documenterSearchIndex = {"docs":
[{"location":"functionindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"functionindex/","page":"Index","title":"Index","text":"","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"What perceptually uniform colorspaces are and why you should be using them:","category":"page"},{"location":"references/","page":"References","title":"References","text":"Ihaka, R. (2003). Colour for Presentation Graphics. In K Hornik, F Leisch, A Zeileis (eds.),  Proceedings of the 3rd International Workshop on Distributed Statistical Computing, Vienna, Austria. ISSN 1609-395X\nZeileis, A., Hornik, K., and Murrell, P. (2009). Escaping RGBland: Selecting colors for statistical graphics. Computational Statistics and Data Analysis, 53(9), 3259–3270. doi:10.1016/j.csda.2008.11.033","category":"page"},{"location":"references/","page":"References","title":"References","text":"Functions in this library were mostly implemented according to:","category":"page"},{"location":"references/","page":"References","title":"References","text":"Schanda, J., ed. Colorimetry: Understanding the CIE system. Wiley-Interscience, 2007.\nSharma, G., Wu, W., and Dalal, E. N. (2005). The CIEDE2000 color‐difference formula: Implementation notes, supplementary test data, and mathematical observations. Color Research & Application, 30(1), 21–30. doi:10.1002/col\nIhaka, R., Murrel, P., Hornik, K., Fisher, J. C., and Zeileis, A. (2013). colorspace: Color Space Manipulation. R package version 1.2-1.\nLindbloom, B. (2013). Useful Color Equations\nWijffelaars, M., Vliegen, R., van Wijk, J., van der Linden, E-J. (2008). Generating Color Palettes using Intuitive Parameters\nGeorg A. Klein Industrial Color Physics. Springer Series in Optical Sciences, 2010. ISSN 0342-4111, ISBN 978-1-4419-1197-1.","category":"page"},{"location":"colormapsandcolorscales/#Colormaps-and-Colorscales","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"","category":"section"},{"location":"colormapsandcolorscales/#Color-interpolation","page":"Colormaps and Colorscales","title":"Color interpolation","text":"","category":"section"},{"location":"colormapsandcolorscales/#Generating-a-range-of-colors","page":"Colormaps and Colorscales","title":"Generating a range of colors","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The range() function has a method that accepts colors:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"    Base.range(start::T; stop::T, length=100) where T<:Colorant","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"This generates N (=length) colors in a linearly interpolated ramp from start to stop, inclusive, returning an Array of colors.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"julia> using Colors\n\njulia> c1 = colorant\"red\"\nRGB{N0f8}(1.0,0.0,0.0)\n\njulia> c2 = colorant\"green\"\nRGB{N0f8}(0.0,0.502,0.0)\n\njulia> range(c1, stop=c2, length=15)\n15-element Array{RGB{N0f8},1} with eltype RGB{FixedPointNumbers.N0f8}:\n RGB{N0f8}(1.0,0.0,0.0)\n RGB{N0f8}(0.929,0.035,0.0)\n RGB{N0f8}(0.859,0.071,0.0)\n RGB{N0f8}(0.784,0.106,0.0)\n RGB{N0f8}(0.714,0.145,0.0)\n RGB{N0f8}(0.643,0.18,0.0)\n RGB{N0f8}(0.573,0.216,0.0)\n RGB{N0f8}(0.502,0.251,0.0)\n RGB{N0f8}(0.427,0.286,0.0)\n RGB{N0f8}(0.357,0.322,0.0)\n RGB{N0f8}(0.286,0.357,0.0)\n RGB{N0f8}(0.216,0.396,0.0)\n RGB{N0f8}(0.141,0.431,0.0)\n RGB{N0f8}(0.071,0.467,0.0)\n RGB{N0f8}(0.0,0.502,0.0)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"If you use Julia through Juno or IJulia, you can get the following color swatches.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using Colors # hide\nshowable(::MIME\"text/plain\", ::AbstractVector{C}) where {C<:Colorant} = false # hide\nrange(colorant\"red\", stop=colorant\"green\", length=15)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The intermediate colors depend on their colorspace. For example:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"range(HSL(colorant\"red\"), stop=HSL(colorant\"green\"), length=15)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The range and weighted_color_mean described below support colors with hues which are out of the range [0, 360]. The hues of generated colors are normalized into [0, 360].","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"range(HSV(0,1,1), stop=HSV(-360,1,1), length=90) # inverse rotation","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"range(LCHab(70,70,0), stop=LCHab(70,70,720), length=90) # multiple rotations","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"While sometimes useful in particular circumstances, typically it is recommended that the hue be within [0, 360]. See normalize_hue.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Base.range","category":"page"},{"location":"colormapsandcolorscales/#Base.range","page":"Colormaps and Colorscales","title":"Base.range","text":"range(start::T; stop::T, length=100) where T<:Colorant\nrange(start::T, stop::T; length=100) where T<:Colorant\n\nGenerates N (=length) >2 colors in a linearly interpolated ramp from start tostop, inclusive, returning an Array of colors.\n\ncompat: Julia 1.1\nstop as a positional argument requires at least Julia 1.1.\n\n\n\n\n\n","category":"function"},{"location":"colormapsandcolorscales/#Weighted-color-means","page":"Colormaps and Colorscales","title":"Weighted color means","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The weighted_color_mean() function returns a color that is the weighted mean of c1 and c2, where c1 has a weight 0 ≤ w1 ≤ 1.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"For example:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"julia> weighted_color_mean(0.8, colorant\"red\", colorant\"green\")\nRGB{N0f8}(0.8,0.102,0.0)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"You can also get the weighted mean of three or more colors by passing the collections of weights and colors. The following is an example of bilinear interpolation.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using Colors # hide\n[weighted_color_mean([(1-s)*(1-t), s*(1-t), (1-s)*t, s*t], # collection of weights\n                     Colors.JULIA_LOGO_COLORS)             # collection of colors\n                            for s = 0:0.2:1, t = 0:0.05:1]","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"weighted_color_mean","category":"page"},{"location":"colormapsandcolorscales/#Colors.weighted_color_mean","page":"Colormaps and Colorscales","title":"Colors.weighted_color_mean","text":"weighted_color_mean(w1, c1, c2)\n\nReturns the color w1*c1 + (1-w1)*c2 that is the weighted mean of c1 and c2, where c1 has a weight 0 ≤ w1 ≤ 1.\n\n\n\n\n\nweighted_color_mean(weights, colors)\n\nReturns the weighted mean of the given collection colors with weights. This is semantically equivalent to the calculation of sum(weights .* colors).\n\nExamples\n\njulia> rgbs = (RGB(1, 0, 0), RGB(0, 1, 0), RGB(0, 0, 1));\n\njulia> weighted_color_mean([0.2, 0.2, 0.6], rgbs)\nRGB{N0f8}(0.2,0.2,0.6)\n\njulia> weighted_color_mean(0.5:-0.25:0.0, RGB{Float64}.(rgbs))\nRGB{Float64}(0.5,0.25,0.0)\n\ncompat: Colors v0.13\nwighted_color_mean with collection or iterator inputs requires Colors v0.13 or later.\n\nnote: Note\nIn a cylindrical color space such as HSV, a weighted mean of more than three colors is generally not meaningful.\n\n\n\n\n\n","category":"function"},{"location":"colormapsandcolorscales/#Colormaps","page":"Colormaps and Colorscales","title":"Colormaps","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"This package provides some pre-defined colormaps (described below). There are also several other packages which provide colormaps:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"PerceptualColourMaps\nColorBrewer\nColorSchemes.jl\nNoveltyColors","category":"page"},{"location":"colormapsandcolorscales/#Predefined-sequential-and-diverging-colormaps","page":"Colormaps and Colorscales","title":"Predefined sequential and diverging colormaps","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The colormap() function returns a predefined sequential or diverging colormap computed using the algorithm by Wijffelaars, M., et al. (2008).","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"colormap(cname::String [, N::Int=100; mid=0.5, logscale=false, kvs...])","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The optional arguments are:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"the number of colors N\nposition of the middle point mid\nthe use of logarithmic scaling with the logscale keyword","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps computed by this algorithm are guaranteed to have an increasing perceived depth or saturation making them ideal for data visualization. This also means that they are (in most cases) color-blind friendly and suitable for black-and-white printing.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The currently supported colormap names are:","category":"page"},{"location":"colormapsandcolorscales/#Sequential","page":"Colormaps and Colorscales","title":"Sequential","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Blues\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using Colors # hide\nusing Main: Colormaps # hide\nColormaps.ColormapSVG(colormap(\"Blues\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Greens\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"Greens\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Grays\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"Grays\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Oranges\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"Oranges\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Purples\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"Purples\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"Reds\"","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"Reds\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/#Diverging","page":"Colormaps and Colorscales","title":"Diverging","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"\"RdBu\" (from red to blue)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Colormaps.ColormapSVG(colormap(\"RdBu\", 32)) # hide","category":"page"},{"location":"colormapsandcolorscales/#","page":"Colormaps and Colorscales","title":"","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"colormap","category":"page"},{"location":"colormapsandcolorscales/#Colors.colormap","page":"Colormaps and Colorscales","title":"Colors.colormap","text":"colormap(cname, N=100; mid=0.5, logscale=false, kvs...])\n\nReturns a predefined sequential or diverging colormap computed using the algorithm by Wijffelaars, M., et al. (2008).\n\nSequential colormaps cname choices are:\n\nBlues\nGreens\nGrays\nOranges\nPurples,\nReds\n\nDiverging colormap choices are RdBu.\n\nOptionally, you can specify the number of colors N (default 100).\n\nExtra control is provided by keyword arguments.\n\nmid sets the position of the midpoint for diverging colormaps.\nlogscale=true uses logarithmically-spaced steps in the colormap.\n\nYou can also use keyword argument names that match the argument names in sequential_palette or diverging_palette.\n\n\n\n\n\n","category":"function"},{"location":"colormapsandcolorscales/#Sequential-and-diverging-color-palettes","page":"Colormaps and Colorscales","title":"Sequential and diverging color palettes","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"You can create your own color palettes by using sequential_palette():","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"sequential_palette(h, [N::Int=100; c=0.88, s=0.6, b=0.75, w=0.15, d=0.0, wcolor=RGB(1,1,0), dcolor=RGB(0,0,1), logscale=false])","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"which creates a sequential map for a hue h (defined in LCHuv space).","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Other possible parameters that you can fine tune are:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"N - number of colors\nc - the overall lightness contrast [0,1]\ns - saturation [0,1]\nb - brightness [0,1]\nw - cold/warm parameter, i.e. the strength of the starting color [0,1]\nd - depth of the ending color [0,1]\nwcolor - starting color (usually defined to be yellow)\ndcolor - ending color (depth)\nlogscale - true/false for toggling logspacing","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Two sequential maps can also be combined into a diverging colormap by using:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"diverging_palette(h1, h2 [, N::Int=100; mid=0.5,c=0.88, s=0.6, b=0.75, w=0.15, d1=0.0, d2=0.0, wcolor=RGB(1,1,0), dcolor1=RGB(1,0,0), dcolor2=RGB(0,0,1), logscale=false])","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"where the arguments are:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"h1 - the main hue of the left side [0,360]\nh2 - the main hue of the right side [0,360]","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"and the optional arguments are:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"N - number of colors\nc - the overall lightness contrast [0,1]\ns - saturation [0,1]\nb - brightness [0,1]\nw - cold/warm parameter, i.e. the strength of the middle color [0,1]\nd1 - depth of the end color in the left side [0,1]\nd2 - depth of the end color in the right side [0,1]\nwcolor - starting color i.e. the middle color (warmness, usually defined to be yellow)\ndcolor1 - end color of the left side (depth)\ndcolor2 - end color of the right side (depth)\nlogscale - true/false for toggling logspacing","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"sequential_palette\ndiverging_palette","category":"page"},{"location":"colormapsandcolorscales/#Colors.sequential_palette","page":"Colormaps and Colorscales","title":"Colors.sequential_palette","text":"sequential_palette(h, N::Int=100; <keyword arguments>)\n\nImplements the color palette creation technique by Wijffelaars, M., et al. (2008).\n\nColormaps are formed using Bézier curves in LCHuv colorspace with some constant hue. In addition, start and end points can be given that are then blended to the original hue smoothly.\n\nArguments\n\nN        - number of colors\nh        - the main hue [0,360]\nc        - the overall lightness contrast [0,1]\ns        - saturation [0,1]\nb        - brightness [0,1]\nw        - cold/warm parameter, i.e. the strength of the starting color [0,1]\nd        - depth of the ending color [0,1]\nwcolor   - starting color (warmness)\ndcolor   - ending color (depth)\nlogscale - true/false for toggling logspacing\n\n\n\n\n\n","category":"function"},{"location":"colormapsandcolorscales/#Colors.diverging_palette","page":"Colormaps and Colorscales","title":"Colors.diverging_palette","text":"diverging_palette(h1, h2, N::Int=100; <keyword arguments>)\n\nCreate diverging palettes by combining 2 sequential palettes\n\nArguments\n\nN        - number of colors\nh1       - the main hue of the left side [0,360]\nh2       - the main hue of the right side [0,360]\nc        - the overall lightness contrast [0,1]\ns        - saturation [0,1]\nb        - brightness [0,1]\nw        - cold/warm parameter, i.e. the strength of the starting color [0,1]\nd1       - depth of the ending color in the left side [0,1]\nd2       - depth of the ending color in the right side [0,1]\nwcolor   - starting color (warmness)\ndcolor1  - ending color of the left side (depth)\ndcolor2  - ending color of the right side (depth)\nlogscale - true/false for toggling logspacing\n\n\n\n\n\n","category":"function"},{"location":"colormapsandcolorscales/#Generating-distinguishable-colors","page":"Colormaps and Colorscales","title":"Generating distinguishable colors","text":"","category":"section"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"distinguishable_colors() generates n maximally distinguishable colors in LCHab space. A seed color or array of seed colors can be provided, and the remaining colors will be chosen to be maximally distinguishable from the seed colors and each other.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"distinguishable_colors(n::Integer, seed::Color)\ndistinguishable_colors{T<:Color}(n::Integer,seed::AbstractVector{T})","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"By default, distinguishable_colors chooses maximally distinguishable colors from the outer product of lightness, chroma, and hue values specified by lchoices = range(0, stop=100, length=15), cchoices = range(0, stop=100, length=15), and hchoices = range(0, stop=342, length=20). The set of colors that distinguishable_colors chooses from can be specified by passing different choices as keyword arguments.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"distinguishable_colors{T<:Color}(n::Integer, seed::AbstractVector{T};\n    dropseed = false,\n    transform::Function = identity,\n    lchoices::AbstractVector = range(0, stop=100, length=15),\n    cchoices::AbstractVector = range(0, stop=100, length=15),\n    hchoices::AbstractVector = range(0, stop=342, length=20)\n)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Distinguishability is maximized with respect to the CIEDE2000 color difference formula (see colordiff in Color Differences). If a transform function is specified, color difference is instead maximized between colors a and b according to colordiff(transform(a), transform(b)).","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"Color arrays generated by distinguishable_colors are particularly useful for improving the readability of multiple trace plots. Here’s an example using PyPlot:","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using PyPlot, Colors\nvars = 1:10\ncols = distinguishable_colors(length(vars), [RGB(1,1,1), RGB(0,0,0)], dropseed=true)\npcols = map(col -> (red(col), green(col), blue(col)), cols)\nxs = 0:12\nfor i in vars\n    plot(xs, map(x -> rand() + 0.1x - 0.5i, xs), c = pcols[i])\nend\nlegend(vars, loc=\"upper right\", bbox_to_anchor=[1.1, 1.])","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using Colors\ncols = distinguishable_colors(10, [RGB(1,1,1), RGB(0,0,0)], dropseed=true) # see above\nsrc_cols = [\"c721dd\", \"d14a00\", \"008c00\", \"007fb1\", \"d1ac00\",\n            \"870036\", \"ff8fa1\", \"00008b\", \"2eff71\", \"675200\"]\npatterns = Dict(zip(src_cols, hex.(cols, :rrggbb)))\npath = joinpath(\"assets\", \"figures\")\nopen(joinpath(path, \"pyplot-seed-dcols.svg\"), \"w\") do out\n    for line in eachline(joinpath(path, \"pyplot-seed-dcols-src.svg\"))\n        m = match(r\"^(.+stroke:#)(.{6})(.+)$\", line)\n        if m === nothing || !(m.captures[2] in src_cols)\n            println(out, line)\n        else\n            println(out, m.captures[1], patterns[m.captures[2]], m.captures[3])\n        end\n    end\nend","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"(Image: pyplot seed ex)","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"To ensure that the generated colors stand out against the default white background and black texts, white and black ([RGB(1,1,1), RGB(0,0,0)]) were used as seed colors to distinguishable_colors(), then dropped from the resulting array with dropseed=true.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"The distinguishable_colors returns a vector of length n regardless of the dropseed option. If dropseed is true, the leading seed colors will be dropped, and the succeeding values ​​of length(seed) will be appended to the end.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"using Colors #hide\nshowable(::MIME\"text/plain\", ::AbstractMatrix{C}) where {C<:Colorant} = false # hide\n\npermutedims(hcat(\n    distinguishable_colors(10, [RGB(1,1,1), RGB(0,0,0)], dropseed=false),\n    distinguishable_colors(10, [RGB(1,1,1), RGB(0,0,0)], dropseed=true),\n    distinguishable_colors(12, [RGB(1,1,1), RGB(0,0,0)])[3:end] # manually drop the seed colors\n))","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"compat: Colors v0.10\ndropseed requires at least Colors v0.10. If you use an older version, drop the seed manually.","category":"page"},{"location":"colormapsandcolorscales/","page":"Colormaps and Colorscales","title":"Colormaps and Colorscales","text":"distinguishable_colors","category":"page"},{"location":"colormapsandcolorscales/#Colors.distinguishable_colors","page":"Colormaps and Colorscales","title":"Colors.distinguishable_colors","text":"colors = distinguishable_colors(n, seed=RGB{N0f8}[];\n                                dropseed=false,\n                                transform=identity,\n                                lchoices=range(0, stop=100, length=15),\n                                cchoices=range(0, stop=100, length=15),\n                                hchoices=range(0, stop=342, length=20))\n\nGenerate n maximally distinguishable colors.\n\nThis uses a greedy brute-force approach to choose n colors that are maximally distinguishable. Given seed color(s), and a set of possible hue, chroma, and lightness values (in LCHab space), it repeatedly chooses the next color as the one that maximizes the minimum pairwise distance to any of the colors already in the palette.\n\nArguments\n\nn: Number of colors to generate.\nseed: Initial color(s) included in the palette.\n\nKeyword arguments\n\ndropseed: if true, the seed values will be dropped. This provides an easy mechanism to ensure that the chosen colors are distinguishable from the seed value(s). When true, n does not include the seed color(s).\ntransform: Transform applied to colors before measuring distance. Default is identity; other choices include deuteranopic to simulate color-blindness.\nlchoices: Possible lightness values\ncchoices: Possible chroma values\nhchoices: Possible hue values\n\nReturns a Vector of colors of length n, of the type specified in seed.\n\n\n\n\n\n","category":"function"},{"location":"colordifferences/#Color-Differences","page":"Color Differences","title":"Color Differences","text":"","category":"section"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"The colordiff function gives an approximate value for the difference between two colors.","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"julia> colordiff(colorant\"red\", colorant\"darkred\")\n23.75414986364304\n\njulia> colordiff(colorant\"red\", colorant\"blue\")\n52.88136782250768\n\njulia> colordiff(HSV(0, 0.75, 0.5), HSL(0, 0.75, 0.5))\n19.48591066257135","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"    colordiff(a::Color, b::Color; metric=DE_2000())","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"Evaluate the CIEDE2000 color difference formula by default. This gives an approximate measure of the perceptual difference between two colors to a typical viewer. A larger number is returned for increasingly distinguishable colors.","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"Options for metric are as follows:","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"Metric Summary\nDE_2000 The color difference using the recommended CIE Delta E 2000 equation.\nDE_94 The color difference using the recommended CIE Delta E 94 equation.\nDE_JPC79 McDonald's \"JP Coates Thread Company\" color difference formula.\nDE_CMC The color difference using the CMC l:c equation.\nDE_BFD The color difference using the BFD equation.\nDE_AB The original ΔE*, Euclidean color difference equation in the Lab colorspace.\nDE_DIN99 The Euclidean color difference equation applied in the DIN99 colorspace.\nDE_DIN99d The Euclidean color difference equation applied in the DIN99d colorspace.\nDE_DIN99o The Euclidean color difference equation applied in the DIN99o colorspace.","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"The following charts show the differences between the three colors for each metric with the default parameters:","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"using Colors # hide\nusing Main: ColorDiffCharts # hide\nColorDiffCharts.ColorDiffChartSVG(DE_2000()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_94()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_JPC79()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_CMC()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_BFD()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_AB()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_DIN99()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_DIN99d()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"ColorDiffCharts.ColorDiffChartSVG(DE_DIN99o()) # hide","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"The difference in the size of circles in the charts above represents the difference in the scale. The radii of the circles are all 20 in their scale units, so larger circles mean that the metric returns smaller values. Therefore, we should not compare the color differences between different metrics.","category":"page"},{"location":"colordifferences/","page":"Color Differences","title":"Color Differences","text":"colordiff\nDE_2000()\nDE_94()\nDE_JPC79()\nDE_CMC()\nDE_BFD()\nDE_AB()\nDE_DIN99()\nDE_DIN99d()\nDE_DIN99o()","category":"page"},{"location":"colordifferences/#Colors.colordiff","page":"Color Differences","title":"Colors.colordiff","text":"colordiff(a, b; metric=DE_2000())\n\nCompute an approximate measure of the perceptual difference between colors a and b. Optionally, a metric may be supplied, chosen among DE_2000 (the default), DE_94, DE_JPC79, DE_CMC, DE_BFD, DE_AB, DE_DIN99, DE_DIN99d and DE_DIN99o.\n\nThe return value is a non-negative number in a type depending on the colors and metric.\n\nnote: Note\nThe supported metrics measure the difference within Lab or its variant colorspaces. When the input colors are not in the colorspace internally used by the metric, the colors (e.g. in RGB) are converted with the default whitepoint CIE D65 (Colors.WP_D65). If you want to use another whitepoint, convert the colors into the colorspace used by metric (e.g. Lab for DE_2000) in advance.\n\n\n\n\n\n","category":"function"},{"location":"colordifferences/#Colors.DE_2000-Tuple{}","page":"Color Differences","title":"Colors.DE_2000","text":"DE_2000(kl=1, kc=1, kh=1)\n\nConstruct a metric of the CIE Delta E 2000 recommendation, with weighting parameters kl, kc and kh as provided for in the recommendation. When not provided, these parameters default to 1.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_94-Tuple{}","page":"Color Differences","title":"Colors.DE_94","text":"DE_94(kl=1, kc=1, kh=1, k1=0.045, k2=0.015)\n\nConstruct a metric of CIE Delta E 94 recommendation (1994), with weighting parameters kl, kc, kh, k1, and k2 as provided for in the recommendation. The kl, k1, and k2 depend on the application:\n\n Graphic Arts Textiles\nkl 1 2\nk1 0.045 0.048\nk2 0.015 0.014\n\nand the default values are for graphic arts. The kc and kh default to 1.\n\nThe DE_94 is more perceptually uniform than the DE_AB, but has some non-uniformities resolved by the DE_2000.\n\nnote: Note\nThe DE_94 is a quasimetric, i.e. violates symmetry. Therefore, colordiff(a, b, metric=DE_94()) may not equal to colordiff(b, a, metric=DE_94()). The first argument of colordiff is taken as the reference (standard) color.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_JPC79-Tuple{}","page":"Color Differences","title":"Colors.DE_JPC79","text":"DE_JPC79()\n\nConstruct a metric using McDonald's \"JP Coates Thread Company\" color difference formula.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_CMC-Tuple{}","page":"Color Differences","title":"Colors.DE_CMC","text":"DE_CMC(kl=1, kc=1)\n\nConstruct a metric using the CMC equation (CMC l:c), with weighting parameters kl and kc. When not provided, these parameters default to 1.\n\nnote: Note\nThe DE_CMC is a quasimetric, i.e. violates symmetry. Therefore, colordiff(a, b, metric=DE_CMC()) may not equal to colordiff(b, a, metric=DE_CMC()). The first argument of colordiff is taken as the reference (standard) color.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_BFD-Tuple{}","page":"Color Differences","title":"Colors.DE_BFD","text":"DE_BFD([wp,] kl=1, kc=1)\n\nConstruct a metric using the BFD equation, with weighting parameters kl and kc. Additionally, a whitepoint wp can be specified, because the BFD equation must convert between XYZ and Lab during the computation. When not provided, kl and kc default to 1, and wp defaults to CIE D65 (Colors.WP_D65).\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_AB-Tuple{}","page":"Color Differences","title":"Colors.DE_AB","text":"DE_AB()\n\nConstruct a metric of the original CIE Delta E equation (ΔE*ab), or Euclidean color difference equation in the Lab (CIELAB) colorspace.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_DIN99-Tuple{}","page":"Color Differences","title":"Colors.DE_DIN99","text":"DE_DIN99()\n\nConstruct a metric using Euclidean color difference equation applied in the DIN99 colorspace.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_DIN99d-Tuple{}","page":"Color Differences","title":"Colors.DE_DIN99d","text":"DE_DIN99d()\n\nConstruct a metric using Euclidean color difference equation applied in the DIN99d colorspace.\n\n\n\n\n\n","category":"method"},{"location":"colordifferences/#Colors.DE_DIN99o-Tuple{}","page":"Color Differences","title":"Colors.DE_DIN99o","text":"DE_DIN99o()\n\nConstruct a metric using Euclidean color difference equation applied in the DIN99o colorspace.\n\n\n\n\n\n","category":"method"},{"location":"namedcolors/#Named-Colors","page":"Named Colors","title":"Named Colors","text":"","category":"section"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"The names of available colors are stored in alphabetical order in the dictionary Colors.color_names:","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"color_names = Dict(\n    \"aliceblue\"            => (240, 248, 255),\n    \"antiquewhite\"         => (250, 235, 215),\n    \"antiquewhite1\"        => (255, 239, 219),\n    ...","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"using Main: NamedColorCharts # hide\nNamedColorCharts.ColorChartSVG(\"whites\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"reds\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"oranges\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"yellows\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"greens\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"cyans\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"blues\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"purples\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"pinks\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"browns\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"NamedColorCharts.ColorChartSVG(\"grays\") # hide","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"info: Info\nColors.jl supports the CSS/SVG named colors and the X11 named colors. The CSS/SVG named colors come from the 16 colors defined in HTML3.2 and the X11 named colors. There are some unnatural definitions due to the different origins. For example, \"LightGray\" is lighter than \"Gray\", but \"DarkGray\" is also lighter than \"Gray\".","category":"page"},{"location":"namedcolors/#Julia-logo-colors","page":"Named Colors","title":"Julia logo colors","text":"","category":"section"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"Colors.JULIA_LOGO_COLORS is a NamedTuple containing the julia logo colors defined in the julia-logo-graphics.","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"using Colors # hide\nlogocolors = Colors.JULIA_LOGO_COLORS\nshowable(::MIME\"text/plain\", ::AbstractVector{C}) where {C<:Colorant} = false # hide\n[logocolors.blue, logocolors.red, logocolors.green, logocolors.purple]","category":"page"},{"location":"namedcolors/","page":"Named Colors","title":"Named Colors","text":"Colors.JULIA_LOGO_COLORS","category":"page"},{"location":"namedcolors/#Colors.JULIA_LOGO_COLORS","page":"Named Colors","title":"Colors.JULIA_LOGO_COLORS","text":"Colors used in the Julia logo as a NamedTuple.\n\nThe keys are approximate descriptions of the hue and do not include black.\n\nNot exported, use as JULIA_LOGO_COLORS.red etc.\n\n\n\n\n\n","category":"constant"},{"location":"constructionandconversion/#Construction-and-Conversion","page":"Construction and Conversion","title":"Construction and Conversion","text":"","category":"section"},{"location":"constructionandconversion/#Available-colorspaces","page":"Construction and Conversion","title":"Available colorspaces","text":"","category":"section"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"The colorspaces used by Colors are defined in ColorTypes. Briefly, the defined spaces are:","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"Red-Green-Blue spaces: RGB, BGR, XRGB, RGBX, RGB24, plus transparent versions ARGB, RGBA, ABGR, BGRA, and ARGB32.\nHSV, HSL, HSI, plus all 6 transparent variants (AHSV, HSVA, AHSL, HSLA, AHSI, HSIA)","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"using Colors # hide\nusing Main: CrossSectionalCharts # hide\nCrossSectionalCharts.crosssection(HSV) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(HSL) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(HSI) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"XYZ, xyY, LMS and all 6 transparent variants\nLab, Luv, LCHab, LCHuv and all 8 transparent variants","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(Lab) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(Luv) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(LCHab) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(LCHuv) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"DIN99, DIN99d, DIN99o and all 6 transparent variants\nStorage formats YIQ, YCbCr and their transparent variants","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(YIQ) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"CrossSectionalCharts.crosssection(YCbCr) # hide","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"Gray, Gray24, and the transparent variants AGray, GrayA, and AGray32.","category":"page"},{"location":"constructionandconversion/#Color-Parsing","page":"Construction and Conversion","title":"Color Parsing","text":"","category":"section"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"You can parse any CSS color specification with the exception of currentColor. You can construct colors from strings using the @colorant_str macro and the parse function.","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"julia> using Colors\n\njulia> colorant\"red\" # named color\nRGB{N0f8}(1.0,0.0,0.0)\n\njulia> parse(Colorant, \"DeepSkyBlue\") # color names are case-insensitive\nRGB{N0f8}(0.0,0.749,1.0)\n\njulia> colorant\"#FF0000\" # 6-digit hex notation\nRGB{N0f8}(1.0,0.0,0.0)\n\njulia> colorant\"#f00\" # 3-digit hex notation\nRGB{N0f8}(1.0,0.0,0.0)\n\njulia> colorant\"rgb(255,0,0)\" # rgb() notation with integers in [0, 255]\nRGB{N0f8}(1.0,0.0,0.0)\n\njulia> colorant\"rgba(255,0,0,0.6)\" # with alpha in [0, 1]\nRGBA{N0f8}(1.0,0.0,0.0,0.6)\n\njulia> colorant\"rgba(100%,80%,0.0%,0.6)\" # with percentages\nRGBA{N0f8}(1.0,0.8,0.0,0.6)\n\njulia> parse(ARGB, \"rgba(255,0,0,0.6)\") # you can specify the return type\nARGB{N0f8}(1.0,0.0,0.0,0.6)\n\njulia> colorant\"hsl(120, 100%, 25%)\" # hsl() notation\nHSL{Float32}(120.0f0,1.0f0,0.25f0)\n\njulia> colorant\"hsla(120, 100%, 25%, 60%)\" # hsla() notation\nHSLA{Float32}(120.0f0,1.0f0,0.25f0,0.6f0)\n\njulia> colorant\"transparent\" # transparent \"black\"\nRGBA{N0f8}(0.0,0.0,0.0,0.0)","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"All CSS/SVG named colors are supported, in addition to X11 named colors, when their definitions do not clash with SVG. You can find all names and their color swatches in Named Colors page.","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"When writing functions the colorant\"red\" version is preferred, because the slow step runs when the code is parsed (i.e., during compilation rather than run-time).","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"The element types of the return types depend on the colorspaces, i.e. the hsl() and hsla() notations return HSL/HSLA colors with Float32 elements, and other notations return RGB/RGBA colors with N0f8 elements. The result colors can be converted to RGB{N0f16} (for example) using:","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"julia> using FixedPointNumbers\n\njulia> RGB{N0f16}(colorant\"indianred\")\nRGB{N0f16}(0.80392,0.36078,0.36078)","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"or","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"julia> parse(RGB{N0f16}, \"indianred\")\nRGB{N0f16}(0.80392,0.36078,0.36078)","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"You can convert colors to hexadecimal strings using the hex function. Note that the conversion result does not have the prefix \"#\".","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"julia> color = colorant\"#C0FFEE\"\nRGB{N0f8}(0.753,1.0,0.933)\n\njulia> hex(color)\n\"C0FFEE\"","category":"page"},{"location":"constructionandconversion/#Color-Conversions","page":"Construction and Conversion","title":"Color Conversions","text":"","category":"section"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"Colors.jl allows you to convert from one colorspace to another using the convert function.","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"For example:","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"julia> convert(RGB, HSL(270, 0.5, 0.5)) # without the element type\nRGB{Float64}(0.5,0.25,0.75)\n\njulia> convert(RGB{N0f8}, HSL(270, 0.5, 0.5)) # with the element type\nRGB{N0f8}(0.502,0.251,0.749)","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"Depending on the source and destination colorspace, this may not be perfectly lossless.","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"","category":"page"},{"location":"constructionandconversion/","page":"Construction and Conversion","title":"Construction and Conversion","text":"@colorant_str\nparse\nhex\nnormalize_hue\nmean_hue","category":"page"},{"location":"constructionandconversion/#Colors.@colorant_str","page":"Construction and Conversion","title":"Colors.@colorant_str","text":"@colorant_str(ex)\n\nParse a literal color name as a Colorant. See Base.parse(Colorant, desc).\n\n\n\n\n\n","category":"macro"},{"location":"constructionandconversion/#Base.parse","page":"Construction and Conversion","title":"Base.parse","text":"parse(Colorant, desc)\n\nParse a color description.\n\nThis parses a subset of HTML/CSS color specifications. In particular, everything is supported but: currentColor.\n\nIt does support named colors (though it uses X11 named colors, which are slightly different than W3C named colors in some cases), rgb(), hsl(), #RGB, and #RRGGBB syntax.\n\nArguments\n\nColorant: literal Colorant\ndesc: color name or description\n\nA literal Colorant will parse according to the desc string (usually returning an RGB); any more specific choice will return a color of the specified type.\n\nReturns\n\nan RGB{N0f8} color, or\nan HSL color if hsl(h, s, l) was used\nan RGBA color if rgba(r, g, b, a) was used\nan HSLA color if hsla(h, s, l, a) was used\nan ARGB{N0f8} color if 0xAARRGGBB/0xARGB was used\na specific Colorant type as specified in the first argument\n\nnote: Note for X11 named colors\nThe X11 color names with spaces (e.g. \"sea green\") are not recommended because they are not allowed in the SVG/CSS.\n\nnote: Note for hex notations\nYou can parse not only the CSS-style hex notations #RRGGBB/#RGB, but also 0xRRGGBB/0xRGB.You can also parse the 8-digit or 4-digit hex notation into an RGB color with alpha. However, the result depends on the prefix (i.e. # or 0x).julia> parse(Colorant, \"#FF8800AA\") # transparent orange\nRGBA{N0f8}(1.0,0.533,0.0,0.667)\n\njulia> parse(Colorant, \"0xFF8800AA\") # opaque purple\nARGB{N0f8}(0.533,0.0,0.667,1.0)\n\n\n\n\n\n","category":"function"},{"location":"constructionandconversion/#Colors.hex","page":"Construction and Conversion","title":"Colors.hex","text":"hex(c::Colorant)\nhex(c::Colorant, style::Symbol)\n\nConvert a color to a hexadecimal string, optionally specifying its style.\n\nArguments\n\nc: a target color.\nstyle: a symbol to specify the hexadecimal notation. Spesifying the uppercase symbols means the return values are in uppercase. The following symbols are available:\n:AUTO: notation automatically selected according to the type of c\n:RRGGBB/:rrggbb: 6-digit opaque notation\n:AARRGGBB/:aarrggbb: 8-digit notation with alpha at the head\n:RRGGBBAA/:rrggbbaa: 8-digit notation with alpha at the tail\n:RGB/:rgb/:ARGB/:argb/:RGBA/:rgba: 3-digit or 4-digit noatation\n:S/:s: short notation if available\n\nExamples\n\njulia> hex(RGB(1,0.5,0))\n\"FF8000\"\n\njulia> hex(ARGB(1,0.5,0,0.25))\n\"40FF8000\"\n\njulia> hex(HSV(30,1.0,1.0), :AARRGGBB)\n\"FFFF8000\"\n\njulia> hex(ARGB(1,0.533,0,0.267), :rrggbbaa)\n\"ff880044\"\n\njulia> hex(ARGB(1,0.533,0,0.267), :rgba)\n\"f804\"\n\njulia> hex(ARGB(1,0.533,0,0.267), :S)\n\"4F80\"\n\ncompat: Colors v0.12\nstyle requires at least Colors v0.12.\n\n\n\n\n\n","category":"function"},{"location":"constructionandconversion/#Colors.normalize_hue","page":"Construction and Conversion","title":"Colors.normalize_hue","text":"normalize_hue(h::Real)\nnormalize_hue(c::Colorant)\n\nReturns a normalized (wrapped-around) hue angle, or a color with the normalized hue, in degrees, in [0, 360]. The normalization is essentially equivalent to mod(h, 360), but is faster at the expense of some accuracy.\n\n\n\n\n\n","category":"function"},{"location":"constructionandconversion/#Colors.mean_hue","page":"Construction and Conversion","title":"Colors.mean_hue","text":"mean_hue(h1::Real, h2::Real)\nmean_hue(a::C, b::C) where {C <: Colorant}\n\nCompute the mean of two hue angles in degrees.\n\nIf the inputs are HSV-like or Lab-like color objects, this will also return a hue, not a color. If one of the colors is achromatic, i.e. has zero saturation or chroma, the hue of the other color is returned instead of the mean.\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#Advanced-Functions","page":"Advanced Functions","title":"Advanced Functions","text":"","category":"section"},{"location":"advancedfunctions/#Color-match-for-CIE-Standard-Observer","page":"Advanced Functions","title":"Color match for CIE Standard Observer","text":"","category":"section"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"The colormatch() function returns an XYZ color corresponding to a wavelength specified in nanometers.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"colormatch(wavelen::Real)","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"The CIE defines a standard observer, defining a typical frequency response curve for each of the three human eye cones.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"For instance, conversion from optical wavelength to RGB can be achieved with:","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"using Colors # hide\nshowable(::MIME\"text/plain\", ::AbstractVector{C}) where {C<:Colorant} = false # hide\nRGB.(colormatch.(350:10:750))","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"colormatch","category":"page"},{"location":"advancedfunctions/#Colors.colormatch","page":"Advanced Functions","title":"Colors.colormatch","text":"colormatch(wavelength)\ncolormatch(matchingfunction, wavelength)\n\nEvaluate the CIE standard observer color match function.\n\nArguments\n\nmatchingfunction (optional): a type used to specify the matching function. Choices include:\nCIE1931_CMF (the default, the CIE 1931 2° matching function)\nCIE1964_CMF (the CIE 1964 10° color matching function)\nCIE1931J_CMF (Judd adjustment to CIE1931_CMF)\nCIE1931JV_CMF (Judd-Vos adjustment to CIE1931_CMF)\nCIE2006_2_CMF (transformed from the CIE 2006 2° LMS cone fundamentals)\nCIE2006_10_CMF (transformed from the CIE 2006 10° LMS cone fundamentals)\nwavelength: Wavelength of stimulus in nanometers.\n\nReturns the XYZ value of perceived color.\n\nnote: Note\nAs of February 2020, only CIE1931_CMF and CIE1964_CMF have been standardized by the ISO/CIE. CIE2006_2_CMF and CIE2006_10_CMF are proposals which have yet to be ratified by the CIE, even though they are sometimes referred to as CIE 2012 CMFs.\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#Chromatic-Adaptation-(white-balance)","page":"Advanced Functions","title":"Chromatic Adaptation (white balance)","text":"","category":"section"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"The whitebalance() function converts a color according to a reference white point.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"whitebalance{T <: Color}(c::T, src_white::Color, ref_white::Color)","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"Convert a color c viewed under conditions with a given source whitepoint src_whitepoint to appear the same under different conditions specified by a reference whitepoint ref_white.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"whitebalance","category":"page"},{"location":"advancedfunctions/#Colors.whitebalance","page":"Advanced Functions","title":"Colors.whitebalance","text":"whitebalance(c, src_white, ref_white)\n\nWhitebalance a color.\n\nInput a source (adopted) and destination (reference) white. For example, if you want a photo taken under fluorescent lighting to appear correct in regular sunlight, you might do something like whitebalance(c, WP_F2, WP_D65).\n\nArguments\n\nc: An observed color.\nsrc_white: Adopted or source white corresponding to c\nref_white: Reference or destination white.\n\nReturns a whitebalanced color.\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#color_deficiency","page":"Advanced Functions","title":"Simulation of color deficiency (\"color blindness\")","text":"","category":"section"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"Three functions are provided that map colors to a reduced gamut to simulate different types of dichromacy, the loss of one of the three types of human photopigments.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"Protanopia, deuteranopia, and tritanopia are the loss of long, middle, and short wavelength photopigment, respectively.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"These functions take a color and return a new, altered color in the same colorspace.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"protanopic(c::Color, p::Float64)\ndeuteranopic(c::Color, p::Float64)\ntritanopic(c::Color, p::Float64)","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"Also provided are versions of these functions with an extra parameter p in [0, 1], giving the degree of photopigment loss, where 1.0 is a complete loss, and 0.0 is no loss at all. The partial loss simulates the anomalous trichromacy, i.e. protanomaly, deuteranomaly and tritanomaly.","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"using Colors #hide\nusing Main: SampleImages # hide\nSampleImages.BeadsImageSVG(\"Normal\") # hide","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"SampleImages.BeadsImageSVG(\"Protanomaly (p=0.7)\", filter=(c->protanopic(c, 0.7))) # hide","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"SampleImages.BeadsImageSVG(\"Deuteranomaly (p=0.7)\", filter=(c->deuteranopic(c, 0.7))) # hide","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"SampleImages.BeadsImageSVG(\"Tritanomaly (p=0.7)\", filter=(c->tritanopic(c, 0.7))) # hide","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"protanopic\ndeuteranopic\ntritanopic","category":"page"},{"location":"advancedfunctions/#Colors.protanopic","page":"Advanced Functions","title":"Colors.protanopic","text":"protanopic(c)\nprotanopic(c, p)\n\nConvert a color to simulate protanopic color deficiency (lack of the long-wavelength photopigment). c is the input color; the optional argument p is the fraction of photopigment loss, in the range 0 (no loss) to 1 (complete loss).\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#Colors.deuteranopic","page":"Advanced Functions","title":"Colors.deuteranopic","text":"deuteranopic(c)\ndeuteranopic(c, p)\n\nConvert a color to simulate deuteranopic color deficiency (lack of the middle-wavelength photopigment). See protanopic for detail about the arguments.\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#Colors.tritanopic","page":"Advanced Functions","title":"Colors.tritanopic","text":"tritanopic(c)\ntritanopic(c, p)\n\nConvert a color to simulate tritanopic color deficiency (lack of the short-wavelength photopigment). See protanopic for detail about the arguments.\n\n\n\n\n\n","category":"function"},{"location":"advancedfunctions/#Most-saturated-color","page":"Advanced Functions","title":"Most saturated color","text":"","category":"section"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"The MSC(h) function returns the most saturated color for a given hue h (defined in LCHuv space, i.e. in range [0, 360]). Optionally the lightness l can also be given, as MSC(h, l). The function calculates the color by finding the edge of the LCHuv space for a given angle (hue).","category":"page"},{"location":"advancedfunctions/","page":"Advanced Functions","title":"Advanced Functions","text":"MSC","category":"page"},{"location":"advancedfunctions/#Colors.MSC","page":"Advanced Functions","title":"Colors.MSC","text":"MSC(h)\nMSC(h, l; linear=false)\n\nCalculate the most saturated color in sRGB gamut for any given hue h by finding the corresponding corner in LCHuv space. Optionally, the lightness l may also be specified.\n\nArguments\n\nh: Hue [0,360] in LCHuv space\nl: Lightness [0,100] in LCHuv space\n\nKeyword arguments\n\nlinear : If true, the saturation is linearly interpolated between black/ white and MSC(h) as the gamut is approximately triangular in L-C section.\n\nnote: Note\nMSC(h) returns an LCHuv color, but MSC(h, l) returns a saturation value. This behavior might change in a future release.\n\n\n\n\n\n","category":"function"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package provides a wide array of functions for dealing with color.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Available colorspaces include:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"RGB, BGR, XRGB, RGBX, RGB24\nHSV, HSL, HSI\nXYZ, xyY, LMS\nLab, Luv, LCHab, LCHuv\nDIN99, DIN99d, DIN99o\nYIQ, YCbCr\nGray, Gray24\nand their transparent variants: ARGB, RGBA, ARGB32, AHSV, HSVA, and so on","category":"page"},{"location":"#Package-Features","page":"Introduction","title":"Package Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Color Parsing\nColor Conversions\nColor Differences\nColormaps and Colorscales\nSimulation of color deficiency","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add Colors","category":"page"},{"location":"#Reexport","page":"Introduction","title":"Reexport","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Note that Colors is used within other packages (e.g. Images) and may have been reexported by them. In addition, the color types used by Colors are defined in ColorTypes package. Colors reexports the types and functions exported by ColorTypes. For example, that means:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Images; # instead `using Colors`\n\njulia> RGB # You can use the types and functions (re-)exported by Colors.\nRGB\n\njulia> RGB === Images.RGB === Colors.RGB === ColorTypes.RGB\ntrue","category":"page"}]
}
